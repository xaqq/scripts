#!/bin/bash

RCol='\e[0m'    # Text Reset
Bla='\e[0;30m';
Red='\e[0;31m';
Gre='\e[0;32m';
Yel='\e[0;33m';
Blu='\e[0;34m';

TMP_DIR=$(mktemp -d)
MAIL_FILE=$TMP_DIR/mail
CLEAR_MAIL=$TMP_DIR/clearmail
TIME_TAKEN_FILE=$TMP_DIR/time_taken
CLAM_REPORT_FILE=$TMP_DIR/tmpfile
DIR_TO_SCAN=()
PGP_BOUNDARY=2412412pgp
boundary=421150523mail

# $1 is the message to print
function fail()
{
    echo "$1"
    echo -en ${RCol}
    exit -1
}

function check_input()
{
    for dir in "$@";
    do
	echo -en ${RCol}
	target=''
	if [ -z "$dir" ] ; then
	    fail "Invalid directory"
	fi
	
	if [ `echo $dir | cut -c1-1` = "/" ] ; then
	    target="$dir"
	else
	    target="`pwd`/$dir"
	fi

	DIR_TO_SCAN+=($target)
	echo -e "Will run clamscan over: ${Yel}$target"
    done

    echo -en ${RCol}
    if [ -z $CLAMSCAN_SH_ASSUME_YES ] || [ $CLAMSCAN_SH_ASSUME_YES != "true" ]; then
	echo -n "Press y to continue: "
	read user_input
	if [ $? -ne 0 ]; then
	    return 1;
	fi
	if [ $user_input = "y" ] || [ $user_input = "y" ] ; then
	    return 0;
	fi
	return 1;
    fi
    echo "Skipping manual confirmation..."
    return 0
}

function write_clear_header()
{
    cat > $MAIL_FILE <<EOF
Subject: Clam Report
Mime-Version: 1.0
From: root@home-server
To: kapp.arno@gmail.com
Content-Type: multipart/encrypted; boundary=$PGP_BOUNDARY; protocol="application/pgp-encrypted";
Content-Transfer-Encoding: 7bit
Content-Description: OpenPGP encrypted message
 
This is an OpenPGP/MIME encrypted message (RFC 2440 and 3156)
--${PGP_BOUNDARY}
Content-Transfer-Encoding: 7bit
Content-Type: application/pgp-encrypted
Content-Description: PGP/MIME Versions Identification
 
Version: 1
 
--${PGP_BOUNDARY}
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Content-Type: application/octet-stream
Content-Description: OpenPGP encrypted message
 
EOF
}


## $1 is the amount of time the script took to run
function write_body()
{
    printf '%s\n' "Content-Type: multipart/mixed; boundary=$boundary

--$boundary
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline

This is a ClamScan report. It was generated by clamscan.sh, and ran 
at this date: `date`.

Time for the script to run: `cat $TIME_TAKEN_FILE`

${#DIR_TO_SCAN[@]} directories scanned:
" >> $CLEAR_MAIL
    for dir in ${DIR_TO_SCAN[@]};
    do
	echo -e "\t $dir" >> $CLEAR_MAIL
    done
    echo "Full report is available as an attachment." >> $CLEAR_MAIL
    printf '\n' >> $CLEAR_MAIL
}

# Add attachment (will encode in base64) to the CLEAR_MAIL file
# $1 is path to the file
function add_attachment()
{
    printf '%s\n' "--${boundary}
Content-Type:`file --mime-type $1 | cut -d':' -f2`
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=clamscan_report.txt
X-Attachment-Id: f_`uuidgen | cut -d'-' -f1`
" >> $CLEAR_MAIL

    base64 $1 >> $CLEAR_MAIL
}

# Add the summary of the scan (found in $CLAM_REPORT_FILE) to the body
# of the mail
function add_scan_summary_to_body()
{
    echo "Below is the scan summary:" >> $CLEAR_MAIL
    ## see http://stackoverflow.com/questions/7103531/how-to-get-the-part-of-file-after-the-line-that-matches-grep-expression-first
    sed -e '1,/----------- SCAN SUMMARY -----------/d' $CLAM_REPORT_FILE >> $CLEAR_MAIL
}

#Compress file
# $1 is the file to be compressed
function compress()
{
    xz -k -e -9 $1
    ls -lh $1 $1.xz
}

#Encrypt tmpfile.xz to tmpfile, erase non compressed original tmpfile
# $1 is the file to encrypt.
# Output file will be $1.enc
function encrypt()
{
    cat $1 | gpg --batch --yes --passphrase=boap --encrypt --sign \
	--armor --recipient AA35A79C > $1.enc
}

function usage()
{
    echo "./$0 DIR1 [DIRN]"
    echo "Environement variable to drive behaviour:"
    echo -e "\t CLAMSCAN_SH_ASSUME_YES: If set to true, will not ask for confirmation before running"
}

function main()
{
    if [ $# -lt 1 ]; then
	echo "Failed invocation: too few arguments"
	usage
	fail 
    fi
    
    check_input "$@"
    if [ $? -eq 1 ]; then
	fail "Canceled by user"
    fi
    
    echo "Continuing... (tmpfile = $TMP_DIR)"

    write_clear_header
    { time clamscan -vr "$@" > $CLAM_REPORT_FILE ; } 2> $TIME_TAKEN_FILE
    write_body
    add_scan_summary_to_body

    add_attachment $CLAM_REPORT_FILE

    ## end mail
    printf '\n%s\n' "--${boundary}--" >> $CLEAR_MAIL

    encrypt $CLEAR_MAIL
    cat $CLEAR_MAIL.enc >> $MAIL_FILE

    ## end encrypted mail
    printf '\n%s\n' "--$PGP_BOUNDARY--" >> $MAIL_FILE
    sendmail -t -oi < $MAIL_FILE
}

main "$@"
exit $?
